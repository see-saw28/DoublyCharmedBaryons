/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *                                                                           *
 * Code massaged by Giulio Dujany - University of Manchester                 *
 *****************************************************************************/

#ifndef ROODSCBSHAPE
#define ROODSCBSHAPE

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

class RooDSCBShape : public RooAbsPdf {
public:
  RooDSCBShape() {} ;
  RooDSCBShape(const char *name, const char *title,
	      RooAbsReal& _x,
	      RooAbsReal& _mu,
	      RooAbsReal& _sig,
	      RooAbsReal& _a1,
	      RooAbsReal& _n1,
	      RooAbsReal& _a2,
	      RooAbsReal& _n2);
  RooDSCBShape(const RooDSCBShape& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RooDSCBShape(*this,newname); }
  inline virtual ~RooDSCBShape() { }

  virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* r=0) const;
  virtual Double_t analyticalIntegral(Int_t code,const char* rangeName=0) const;

protected:

  RooRealProxy x ;
  RooRealProxy mu ;
  RooRealProxy sig ;
  RooRealProxy a1 ;
  RooRealProxy n1 ;
  RooRealProxy a2 ;
  RooRealProxy n2 ;

  Double_t evaluate() const ;
  double IntGaus(double x0, double x1) const;
  double IntPwLw(double x0, double x1, double alpha, double n) const;

private:

  ClassDef(RooDSCBShape,1)
  // Double sided crystal ball
  // mu and sig are the parameters of the gaussians
  // a1, n1 the parameters of the left power law tail
  // a2, n2 the parameters of the right power law tail
  // a1, a2 >= 0; n1, n2 >= 1// Your description goes here...
};

#endif
